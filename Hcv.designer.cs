#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HepCWriteback
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CDSTProduction")]
	public partial class HcvDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPatientCohort(PatientCohort instance);
    partial void UpdatePatientCohort(PatientCohort instance);
    partial void DeletePatientCohort(PatientCohort instance);
    partial void InsertPatientLab(PatientLab instance);
    partial void UpdatePatientLab(PatientLab instance);
    partial void DeletePatientLab(PatientLab instance);
    partial void InsertPatientMed(PatientMed instance);
    partial void UpdatePatientMed(PatientMed instance);
    partial void DeletePatientMed(PatientMed instance);
    #endregion
		
		public HcvDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CDSTProductionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HcvDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HcvDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HcvDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HcvDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PatientCohort> PatientCohorts
		{
			get
			{
				return this.GetTable<PatientCohort>();
			}
		}
		
		public System.Data.Linq.Table<PatientLab> PatientLabs
		{
			get
			{
				return this.GetTable<PatientLab>();
			}
		}
		
		public System.Data.Linq.Table<PatientMed> PatientMeds
		{
			get
			{
				return this.GetTable<PatientMed>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientCohorts")]
	public partial class PatientCohort : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private int _PatientSID;
		
		private string _PatientSSN;
		
		private string _PatientIEN;
		
		private System.Nullable<bool> _Deceased;
		
		private System.Nullable<int> _HCABPositive;
		
		private System.Nullable<int> _HCViralPositive;
		
		private string _PatientLastName;
		
		private string _PatientFirstName;
		
		private string _Last4SSN;
		
		private EntitySet<PatientLab> _PatientLabs;
		
		private EntitySet<PatientMed> _PatientMeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnPatientSIDChanging(int value);
    partial void OnPatientSIDChanged();
    partial void OnPatientSSNChanging(string value);
    partial void OnPatientSSNChanged();
    partial void OnPatientIENChanging(string value);
    partial void OnPatientIENChanged();
    partial void OnDeceasedChanging(System.Nullable<bool> value);
    partial void OnDeceasedChanged();
    partial void OnHCABPositiveChanging(System.Nullable<int> value);
    partial void OnHCABPositiveChanged();
    partial void OnHCViralPositiveChanging(System.Nullable<int> value);
    partial void OnHCViralPositiveChanged();
    partial void OnPatientLastNameChanging(string value);
    partial void OnPatientLastNameChanged();
    partial void OnPatientFirstNameChanging(string value);
    partial void OnPatientFirstNameChanged();
    partial void OnLast4SSNChanging(string value);
    partial void OnLast4SSNChanged();
    #endregion
		
		public PatientCohort()
		{
			this._PatientLabs = new EntitySet<PatientLab>(new Action<PatientLab>(this.attach_PatientLabs), new Action<PatientLab>(this.detach_PatientLabs));
			this._PatientMeds = new EntitySet<PatientMed>(new Action<PatientMed>(this.attach_PatientMeds), new Action<PatientMed>(this.detach_PatientMeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientSID
		{
			get
			{
				return this._PatientSID;
			}
			set
			{
				if ((this._PatientSID != value))
				{
					this.OnPatientSIDChanging(value);
					this.SendPropertyChanging();
					this._PatientSID = value;
					this.SendPropertyChanged("PatientSID");
					this.OnPatientSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSSN", DbType="VarChar(50)")]
		public string PatientSSN
		{
			get
			{
				return this._PatientSSN;
			}
			set
			{
				if ((this._PatientSSN != value))
				{
					this.OnPatientSSNChanging(value);
					this.SendPropertyChanging();
					this._PatientSSN = value;
					this.SendPropertyChanged("PatientSSN");
					this.OnPatientSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientIEN", DbType="VarChar(50)")]
		public string PatientIEN
		{
			get
			{
				return this._PatientIEN;
			}
			set
			{
				if ((this._PatientIEN != value))
				{
					this.OnPatientIENChanging(value);
					this.SendPropertyChanging();
					this._PatientIEN = value;
					this.SendPropertyChanged("PatientIEN");
					this.OnPatientIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deceased", DbType="Bit")]
		public System.Nullable<bool> Deceased
		{
			get
			{
				return this._Deceased;
			}
			set
			{
				if ((this._Deceased != value))
				{
					this.OnDeceasedChanging(value);
					this.SendPropertyChanging();
					this._Deceased = value;
					this.SendPropertyChanged("Deceased");
					this.OnDeceasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HCABPositive", DbType="Int")]
		public System.Nullable<int> HCABPositive
		{
			get
			{
				return this._HCABPositive;
			}
			set
			{
				if ((this._HCABPositive != value))
				{
					this.OnHCABPositiveChanging(value);
					this.SendPropertyChanging();
					this._HCABPositive = value;
					this.SendPropertyChanged("HCABPositive");
					this.OnHCABPositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HCViralPositive", DbType="Int")]
		public System.Nullable<int> HCViralPositive
		{
			get
			{
				return this._HCViralPositive;
			}
			set
			{
				if ((this._HCViralPositive != value))
				{
					this.OnHCViralPositiveChanging(value);
					this.SendPropertyChanging();
					this._HCViralPositive = value;
					this.SendPropertyChanged("HCViralPositive");
					this.OnHCViralPositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientLastName", DbType="VarChar(50)")]
		public string PatientLastName
		{
			get
			{
				return this._PatientLastName;
			}
			set
			{
				if ((this._PatientLastName != value))
				{
					this.OnPatientLastNameChanging(value);
					this.SendPropertyChanging();
					this._PatientLastName = value;
					this.SendPropertyChanged("PatientLastName");
					this.OnPatientLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientFirstName", DbType="VarChar(50)")]
		public string PatientFirstName
		{
			get
			{
				return this._PatientFirstName;
			}
			set
			{
				if ((this._PatientFirstName != value))
				{
					this.OnPatientFirstNameChanging(value);
					this.SendPropertyChanging();
					this._PatientFirstName = value;
					this.SendPropertyChanged("PatientFirstName");
					this.OnPatientFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last4SSN", DbType="VarChar(50)")]
		public string Last4SSN
		{
			get
			{
				return this._Last4SSN;
			}
			set
			{
				if ((this._Last4SSN != value))
				{
					this.OnLast4SSNChanging(value);
					this.SendPropertyChanging();
					this._Last4SSN = value;
					this.SendPropertyChanged("Last4SSN");
					this.OnLast4SSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientCohort_PatientLab", Storage="_PatientLabs", ThisKey="PatientSID", OtherKey="PatientSID")]
		public EntitySet<PatientLab> PatientLabs
		{
			get
			{
				return this._PatientLabs;
			}
			set
			{
				this._PatientLabs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientCohort_PatientMed", Storage="_PatientMeds", ThisKey="PatientSID", OtherKey="PatientSID")]
		public EntitySet<PatientMed> PatientMeds
		{
			get
			{
				return this._PatientMeds;
			}
			set
			{
				this._PatientMeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientLabs(PatientLab entity)
		{
			this.SendPropertyChanging();
			entity.PatientCohort = this;
		}
		
		private void detach_PatientLabs(PatientLab entity)
		{
			this.SendPropertyChanging();
			entity.PatientCohort = null;
		}
		
		private void attach_PatientMeds(PatientMed entity)
		{
			this.SendPropertyChanging();
			entity.PatientCohort = this;
		}
		
		private void detach_PatientMeds(PatientMed entity)
		{
			this.SendPropertyChanging();
			entity.PatientCohort = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientLabs")]
	public partial class PatientLab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabID;
		
		private int _PatientSID;
		
		private System.Nullable<System.DateTime> _LabChemSpecimenDateTime;
		
		private string _HepCAntibody;
		
		private string _HcvQuantitative;
		
		private string _HcvQualitative;
		
		private System.Nullable<decimal> _TSH;
		
		private System.Nullable<decimal> _SGPT;
		
		private System.Nullable<decimal> _SGoT;
		
		private System.Nullable<decimal> _TotBilirubin;
		
		private System.Nullable<decimal> _UreaNitrogen;
		
		private System.Nullable<decimal> _ANC;
		
		private System.Nullable<decimal> _WBC;
		
		private System.Nullable<decimal> _HGB;
		
		private System.Nullable<decimal> _PLT;
		
		private EntityRef<PatientCohort> _PatientCohort;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabIDChanging(int value);
    partial void OnLabIDChanged();
    partial void OnPatientSIDChanging(int value);
    partial void OnPatientSIDChanged();
    partial void OnLabChemSpecimenDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLabChemSpecimenDateTimeChanged();
    partial void OnHepCAntibodyChanging(string value);
    partial void OnHepCAntibodyChanged();
    partial void OnHcvQuantitativeChanging(string value);
    partial void OnHcvQuantitativeChanged();
    partial void OnHcvQualitativeChanging(string value);
    partial void OnHcvQualitativeChanged();
    partial void OnTSHChanging(System.Nullable<decimal> value);
    partial void OnTSHChanged();
    partial void OnSGPTChanging(System.Nullable<decimal> value);
    partial void OnSGPTChanged();
    partial void OnSGoTChanging(System.Nullable<decimal> value);
    partial void OnSGoTChanged();
    partial void OnTotBilirubinChanging(System.Nullable<decimal> value);
    partial void OnTotBilirubinChanged();
    partial void OnUreaNitrogenChanging(System.Nullable<decimal> value);
    partial void OnUreaNitrogenChanged();
    partial void OnANCChanging(System.Nullable<decimal> value);
    partial void OnANCChanged();
    partial void OnWBCChanging(System.Nullable<decimal> value);
    partial void OnWBCChanged();
    partial void OnHGBChanging(System.Nullable<decimal> value);
    partial void OnHGBChanged();
    partial void OnPLTChanging(System.Nullable<decimal> value);
    partial void OnPLTChanged();
    #endregion
		
		public PatientLab()
		{
			this._PatientCohort = default(EntityRef<PatientCohort>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSID", DbType="Int NOT NULL")]
		public int PatientSID
		{
			get
			{
				return this._PatientSID;
			}
			set
			{
				if ((this._PatientSID != value))
				{
					if (this._PatientCohort.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientSIDChanging(value);
					this.SendPropertyChanging();
					this._PatientSID = value;
					this.SendPropertyChanged("PatientSID");
					this.OnPatientSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabChemSpecimenDateTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LabChemSpecimenDateTime
		{
			get
			{
				return this._LabChemSpecimenDateTime;
			}
			set
			{
				if ((this._LabChemSpecimenDateTime != value))
				{
					this.OnLabChemSpecimenDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LabChemSpecimenDateTime = value;
					this.SendPropertyChanged("LabChemSpecimenDateTime");
					this.OnLabChemSpecimenDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HepCAntibody", DbType="VarChar(50)")]
		public string HepCAntibody
		{
			get
			{
				return this._HepCAntibody;
			}
			set
			{
				if ((this._HepCAntibody != value))
				{
					this.OnHepCAntibodyChanging(value);
					this.SendPropertyChanging();
					this._HepCAntibody = value;
					this.SendPropertyChanged("HepCAntibody");
					this.OnHepCAntibodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HcvQuantitative", DbType="VarChar(50)")]
		public string HcvQuantitative
		{
			get
			{
				return this._HcvQuantitative;
			}
			set
			{
				if ((this._HcvQuantitative != value))
				{
					this.OnHcvQuantitativeChanging(value);
					this.SendPropertyChanging();
					this._HcvQuantitative = value;
					this.SendPropertyChanged("HcvQuantitative");
					this.OnHcvQuantitativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HcvQualitative", DbType="VarChar(50)")]
		public string HcvQualitative
		{
			get
			{
				return this._HcvQualitative;
			}
			set
			{
				if ((this._HcvQualitative != value))
				{
					this.OnHcvQualitativeChanging(value);
					this.SendPropertyChanging();
					this._HcvQualitative = value;
					this.SendPropertyChanged("HcvQualitative");
					this.OnHcvQualitativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TSH", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> TSH
		{
			get
			{
				return this._TSH;
			}
			set
			{
				if ((this._TSH != value))
				{
					this.OnTSHChanging(value);
					this.SendPropertyChanging();
					this._TSH = value;
					this.SendPropertyChanged("TSH");
					this.OnTSHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SGPT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> SGPT
		{
			get
			{
				return this._SGPT;
			}
			set
			{
				if ((this._SGPT != value))
				{
					this.OnSGPTChanging(value);
					this.SendPropertyChanging();
					this._SGPT = value;
					this.SendPropertyChanged("SGPT");
					this.OnSGPTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SGoT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> SGoT
		{
			get
			{
				return this._SGoT;
			}
			set
			{
				if ((this._SGoT != value))
				{
					this.OnSGoTChanging(value);
					this.SendPropertyChanging();
					this._SGoT = value;
					this.SendPropertyChanged("SGoT");
					this.OnSGoTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotBilirubin", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> TotBilirubin
		{
			get
			{
				return this._TotBilirubin;
			}
			set
			{
				if ((this._TotBilirubin != value))
				{
					this.OnTotBilirubinChanging(value);
					this.SendPropertyChanging();
					this._TotBilirubin = value;
					this.SendPropertyChanged("TotBilirubin");
					this.OnTotBilirubinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UreaNitrogen", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UreaNitrogen
		{
			get
			{
				return this._UreaNitrogen;
			}
			set
			{
				if ((this._UreaNitrogen != value))
				{
					this.OnUreaNitrogenChanging(value);
					this.SendPropertyChanging();
					this._UreaNitrogen = value;
					this.SendPropertyChanged("UreaNitrogen");
					this.OnUreaNitrogenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANC", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> ANC
		{
			get
			{
				return this._ANC;
			}
			set
			{
				if ((this._ANC != value))
				{
					this.OnANCChanging(value);
					this.SendPropertyChanging();
					this._ANC = value;
					this.SendPropertyChanged("ANC");
					this.OnANCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WBC", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> WBC
		{
			get
			{
				return this._WBC;
			}
			set
			{
				if ((this._WBC != value))
				{
					this.OnWBCChanging(value);
					this.SendPropertyChanging();
					this._WBC = value;
					this.SendPropertyChanged("WBC");
					this.OnWBCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HGB", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> HGB
		{
			get
			{
				return this._HGB;
			}
			set
			{
				if ((this._HGB != value))
				{
					this.OnHGBChanging(value);
					this.SendPropertyChanging();
					this._HGB = value;
					this.SendPropertyChanged("HGB");
					this.OnHGBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> PLT
		{
			get
			{
				return this._PLT;
			}
			set
			{
				if ((this._PLT != value))
				{
					this.OnPLTChanging(value);
					this.SendPropertyChanging();
					this._PLT = value;
					this.SendPropertyChanged("PLT");
					this.OnPLTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientCohort_PatientLab", Storage="_PatientCohort", ThisKey="PatientSID", OtherKey="PatientSID", IsForeignKey=true)]
		public PatientCohort PatientCohort
		{
			get
			{
				return this._PatientCohort.Entity;
			}
			set
			{
				PatientCohort previousValue = this._PatientCohort.Entity;
				if (((previousValue != value) 
							|| (this._PatientCohort.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientCohort.Entity = null;
						previousValue.PatientLabs.Remove(this);
					}
					this._PatientCohort.Entity = value;
					if ((value != null))
					{
						value.PatientLabs.Add(this);
						this._PatientSID = value.PatientSID;
					}
					else
					{
						this._PatientSID = default(int);
					}
					this.SendPropertyChanged("PatientCohort");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientMeds")]
	public partial class PatientMed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatientSID;
		
		private System.Nullable<System.DateTime> _ReleaseDateTime;
		
		private System.Nullable<int> _DaysSupply;
		
		private string _LocalDrugNameWithDose;
		
		private string _Sig;
		
		private string _RxStatus;
		
		private EntityRef<PatientCohort> _PatientCohort;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientSIDChanging(int value);
    partial void OnPatientSIDChanged();
    partial void OnReleaseDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateTimeChanged();
    partial void OnDaysSupplyChanging(System.Nullable<int> value);
    partial void OnDaysSupplyChanged();
    partial void OnLocalDrugNameWithDoseChanging(string value);
    partial void OnLocalDrugNameWithDoseChanged();
    partial void OnSigChanging(string value);
    partial void OnSigChanged();
    partial void OnRxStatusChanging(string value);
    partial void OnRxStatusChanged();
    #endregion
		
		public PatientMed()
		{
			this._PatientCohort = default(EntityRef<PatientCohort>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSID", DbType="Int NOT NULL")]
		public int PatientSID
		{
			get
			{
				return this._PatientSID;
			}
			set
			{
				if ((this._PatientSID != value))
				{
					if (this._PatientCohort.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientSIDChanging(value);
					this.SendPropertyChanging();
					this._PatientSID = value;
					this.SendPropertyChanged("PatientSID");
					this.OnPatientSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDateTime", DbType="Date")]
		public System.Nullable<System.DateTime> ReleaseDateTime
		{
			get
			{
				return this._ReleaseDateTime;
			}
			set
			{
				if ((this._ReleaseDateTime != value))
				{
					this.OnReleaseDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDateTime = value;
					this.SendPropertyChanged("ReleaseDateTime");
					this.OnReleaseDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysSupply", DbType="Int")]
		public System.Nullable<int> DaysSupply
		{
			get
			{
				return this._DaysSupply;
			}
			set
			{
				if ((this._DaysSupply != value))
				{
					this.OnDaysSupplyChanging(value);
					this.SendPropertyChanging();
					this._DaysSupply = value;
					this.SendPropertyChanged("DaysSupply");
					this.OnDaysSupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalDrugNameWithDose", DbType="VarChar(100)")]
		public string LocalDrugNameWithDose
		{
			get
			{
				return this._LocalDrugNameWithDose;
			}
			set
			{
				if ((this._LocalDrugNameWithDose != value))
				{
					this.OnLocalDrugNameWithDoseChanging(value);
					this.SendPropertyChanging();
					this._LocalDrugNameWithDose = value;
					this.SendPropertyChanged("LocalDrugNameWithDose");
					this.OnLocalDrugNameWithDoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sig", DbType="VarChar(1600)")]
		public string Sig
		{
			get
			{
				return this._Sig;
			}
			set
			{
				if ((this._Sig != value))
				{
					this.OnSigChanging(value);
					this.SendPropertyChanging();
					this._Sig = value;
					this.SendPropertyChanged("Sig");
					this.OnSigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxStatus", DbType="VarChar(50)")]
		public string RxStatus
		{
			get
			{
				return this._RxStatus;
			}
			set
			{
				if ((this._RxStatus != value))
				{
					this.OnRxStatusChanging(value);
					this.SendPropertyChanging();
					this._RxStatus = value;
					this.SendPropertyChanged("RxStatus");
					this.OnRxStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientCohort_PatientMed", Storage="_PatientCohort", ThisKey="PatientSID", OtherKey="PatientSID", IsForeignKey=true)]
		public PatientCohort PatientCohort
		{
			get
			{
				return this._PatientCohort.Entity;
			}
			set
			{
				PatientCohort previousValue = this._PatientCohort.Entity;
				if (((previousValue != value) 
							|| (this._PatientCohort.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientCohort.Entity = null;
						previousValue.PatientMeds.Remove(this);
					}
					this._PatientCohort.Entity = value;
					if ((value != null))
					{
						value.PatientMeds.Add(this);
						this._PatientSID = value.PatientSID;
					}
					else
					{
						this._PatientSID = default(int);
					}
					this.SendPropertyChanged("PatientCohort");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
